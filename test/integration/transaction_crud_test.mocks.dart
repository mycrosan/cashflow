// Mocks generated by Mockito 5.4.4 from annotations
// in fluxo_caixa_familiar/test/integration/transaction_crud_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;
import 'dart:ui' as _i11;

import 'package:fluxo_caixa_familiar/models/category.dart' as _i7;
import 'package:fluxo_caixa_familiar/models/member.dart' as _i6;
import 'package:fluxo_caixa_familiar/models/recurring_transaction.dart' as _i9;
import 'package:fluxo_caixa_familiar/models/transaction.dart' as _i8;
import 'package:fluxo_caixa_familiar/models/user.dart' as _i5;
import 'package:fluxo_caixa_familiar/providers/auth_provider.dart' as _i10;
import 'package:fluxo_caixa_familiar/services/database_service.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:sqflite/sqflite.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDatabase_0 extends _i1.SmartFake implements _i2.Database {
  _FakeDatabase_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [DatabaseService].
///
/// See the documentation for Mockito's code generation for more information.
class MockDatabaseService extends _i1.Mock implements _i3.DatabaseService {
  MockDatabaseService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Database> get database => (super.noSuchMethod(
        Invocation.getter(#database),
        returnValue: _i4.Future<_i2.Database>.value(_FakeDatabase_0(
          this,
          Invocation.getter(#database),
        )),
      ) as _i4.Future<_i2.Database>);

  @override
  _i4.Future<int> insertUser(_i5.User? user) => (super.noSuchMethod(
        Invocation.method(
          #insertUser,
          [user],
        ),
        returnValue: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);

  @override
  _i4.Future<List<_i5.User>> getUsers() => (super.noSuchMethod(
        Invocation.method(
          #getUsers,
          [],
        ),
        returnValue: _i4.Future<List<_i5.User>>.value(<_i5.User>[]),
      ) as _i4.Future<List<_i5.User>>);

  @override
  _i4.Future<_i5.User?> getUser(int? id) => (super.noSuchMethod(
        Invocation.method(
          #getUser,
          [id],
        ),
        returnValue: _i4.Future<_i5.User?>.value(),
      ) as _i4.Future<_i5.User?>);

  @override
  _i4.Future<_i5.User?> getUserByEmail(String? email) => (super.noSuchMethod(
        Invocation.method(
          #getUserByEmail,
          [email],
        ),
        returnValue: _i4.Future<_i5.User?>.value(),
      ) as _i4.Future<_i5.User?>);

  @override
  _i4.Future<int> updateUser(_i5.User? user) => (super.noSuchMethod(
        Invocation.method(
          #updateUser,
          [user],
        ),
        returnValue: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);

  @override
  _i4.Future<int> deleteUser(int? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteUser,
          [id],
        ),
        returnValue: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);

  @override
  _i4.Future<int> insertMember(_i6.Member? member) => (super.noSuchMethod(
        Invocation.method(
          #insertMember,
          [member],
        ),
        returnValue: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);

  @override
  _i4.Future<List<_i6.Member>> getMembers({int? userId}) => (super.noSuchMethod(
        Invocation.method(
          #getMembers,
          [],
          {#userId: userId},
        ),
        returnValue: _i4.Future<List<_i6.Member>>.value(<_i6.Member>[]),
      ) as _i4.Future<List<_i6.Member>>);

  @override
  _i4.Future<_i6.Member?> getMember(int? id) => (super.noSuchMethod(
        Invocation.method(
          #getMember,
          [id],
        ),
        returnValue: _i4.Future<_i6.Member?>.value(),
      ) as _i4.Future<_i6.Member?>);

  @override
  _i4.Future<int> updateMember(_i6.Member? member) => (super.noSuchMethod(
        Invocation.method(
          #updateMember,
          [member],
        ),
        returnValue: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);

  @override
  _i4.Future<int> deleteMember(int? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteMember,
          [id],
        ),
        returnValue: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);

  @override
  _i4.Future<int> insertCategory(_i7.Category? category) => (super.noSuchMethod(
        Invocation.method(
          #insertCategory,
          [category],
        ),
        returnValue: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);

  @override
  _i4.Future<List<_i7.Category>> getCategories({int? userId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCategories,
          [],
          {#userId: userId},
        ),
        returnValue: _i4.Future<List<_i7.Category>>.value(<_i7.Category>[]),
      ) as _i4.Future<List<_i7.Category>>);

  @override
  _i4.Future<List<_i7.Category>> getCategoriesByType(
    String? type, {
    int? userId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCategoriesByType,
          [type],
          {#userId: userId},
        ),
        returnValue: _i4.Future<List<_i7.Category>>.value(<_i7.Category>[]),
      ) as _i4.Future<List<_i7.Category>>);

  @override
  _i4.Future<_i7.Category?> getCategory(int? id) => (super.noSuchMethod(
        Invocation.method(
          #getCategory,
          [id],
        ),
        returnValue: _i4.Future<_i7.Category?>.value(),
      ) as _i4.Future<_i7.Category?>);

  @override
  _i4.Future<int> updateCategory(_i7.Category? category) => (super.noSuchMethod(
        Invocation.method(
          #updateCategory,
          [category],
        ),
        returnValue: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);

  @override
  _i4.Future<int> deleteCategory(int? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteCategory,
          [id],
        ),
        returnValue: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);

  @override
  _i4.Future<int> insertTransaction(_i8.Transaction? transaction) =>
      (super.noSuchMethod(
        Invocation.method(
          #insertTransaction,
          [transaction],
        ),
        returnValue: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);

  @override
  _i4.Future<List<_i8.Transaction>> getTransactions({
    DateTime? startDate,
    DateTime? endDate,
    String? category,
    int? memberId,
    int? userId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTransactions,
          [],
          {
            #startDate: startDate,
            #endDate: endDate,
            #category: category,
            #memberId: memberId,
            #userId: userId,
          },
        ),
        returnValue:
            _i4.Future<List<_i8.Transaction>>.value(<_i8.Transaction>[]),
      ) as _i4.Future<List<_i8.Transaction>>);

  @override
  _i4.Future<_i8.Transaction?> getTransaction(int? id) => (super.noSuchMethod(
        Invocation.method(
          #getTransaction,
          [id],
        ),
        returnValue: _i4.Future<_i8.Transaction?>.value(),
      ) as _i4.Future<_i8.Transaction?>);

  @override
  _i4.Future<int> updateTransaction(_i8.Transaction? transaction) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateTransaction,
          [transaction],
        ),
        returnValue: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);

  @override
  _i4.Future<int> deleteTransaction(int? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteTransaction,
          [id],
        ),
        returnValue: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);

  @override
  _i4.Future<int> insertRecurringTransaction(
          _i9.RecurringTransaction? recurringTransaction) =>
      (super.noSuchMethod(
        Invocation.method(
          #insertRecurringTransaction,
          [recurringTransaction],
        ),
        returnValue: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);

  @override
  _i4.Future<List<_i9.RecurringTransaction>> getRecurringTransactions(
          {int? userId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getRecurringTransactions,
          [],
          {#userId: userId},
        ),
        returnValue: _i4.Future<List<_i9.RecurringTransaction>>.value(
            <_i9.RecurringTransaction>[]),
      ) as _i4.Future<List<_i9.RecurringTransaction>>);

  @override
  _i4.Future<int> updateRecurringTransaction(
          _i9.RecurringTransaction? recurringTransaction) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateRecurringTransaction,
          [recurringTransaction],
        ),
        returnValue: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);

  @override
  _i4.Future<int> deleteRecurringTransaction(int? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteRecurringTransaction,
          [id],
        ),
        returnValue: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);

  @override
  _i4.Future<_i9.RecurringTransaction?> getRecurringTransaction(int? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getRecurringTransaction,
          [id],
        ),
        returnValue: _i4.Future<_i9.RecurringTransaction?>.value(),
      ) as _i4.Future<_i9.RecurringTransaction?>);

  @override
  _i4.Future<void> logSyncAction(
    String? tableName,
    int? recordId,
    String? action,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #logSyncAction,
          [
            tableName,
            recordId,
            action,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<List<Map<String, dynamic>>> getPendingSyncActions() =>
      (super.noSuchMethod(
        Invocation.method(
          #getPendingSyncActions,
          [],
        ),
        returnValue: _i4.Future<List<Map<String, dynamic>>>.value(
            <Map<String, dynamic>>[]),
      ) as _i4.Future<List<Map<String, dynamic>>>);

  @override
  _i4.Future<void> markSyncActionAsSynced(int? id) => (super.noSuchMethod(
        Invocation.method(
          #markSyncActionAsSynced,
          [id],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<bool> markTransactionAsPaid(
    int? transactionId, {
    DateTime? paidDate,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #markTransactionAsPaid,
          [transactionId],
          {#paidDate: paidDate},
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<bool> markTransactionAsUnpaid(int? transactionId) =>
      (super.noSuchMethod(
        Invocation.method(
          #markTransactionAsUnpaid,
          [transactionId],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<void> clearDatabase() => (super.noSuchMethod(
        Invocation.method(
          #clearDatabase,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> removeDuplicateTables() => (super.noSuchMethod(
        Invocation.method(
          #removeDuplicateTables,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> clearAllData() => (super.noSuchMethod(
        Invocation.method(
          #clearAllData,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<List<_i9.RecurringTransaction>> getAllRecurringTransactions() =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllRecurringTransactions,
          [],
        ),
        returnValue: _i4.Future<List<_i9.RecurringTransaction>>.value(
            <_i9.RecurringTransaction>[]),
      ) as _i4.Future<List<_i9.RecurringTransaction>>);
}

/// A class which mocks [AuthProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthProvider extends _i1.Mock implements _i10.AuthProvider {
  MockAuthProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isLoading => (super.noSuchMethod(
        Invocation.getter(#isLoading),
        returnValue: false,
      ) as bool);

  @override
  bool get isAuthenticated => (super.noSuchMethod(
        Invocation.getter(#isAuthenticated),
        returnValue: false,
      ) as bool);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  _i4.Future<bool> login(
    String? email,
    String? password,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #login,
          [
            email,
            password,
          ],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<bool> register(
    String? name,
    String? email,
    String? password,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #register,
          [
            name,
            email,
            password,
          ],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  void logout() => super.noSuchMethod(
        Invocation.method(
          #logout,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Future<bool> updateProfile({
    String? name,
    String? email,
    String? profilePicture,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateProfile,
          [],
          {
            #name: name,
            #email: email,
            #profilePicture: profilePicture,
          },
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<bool> changePassword(
    String? currentPassword,
    String? newPassword,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #changePassword,
          [
            currentPassword,
            newPassword,
          ],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  void clearError() => super.noSuchMethod(
        Invocation.method(
          #clearError,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addListener(_i11.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i11.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
